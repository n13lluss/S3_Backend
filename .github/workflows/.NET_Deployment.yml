name: .NET build, test, and coverage

on:
  push:
    branches: ["master", "develop"]
  pull_request:
    branches: ["master", "develop"]
    types: [opened, synchronize, reopened]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore TravelblogBackend.sln

      - name: Build
        run: dotnet build Travelblog.Api/Travelblog.Api.csproj --configuration Release --no-restore

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore TravelblogBackend.sln

      - name: Install dotnet tools
        run: |
          dotnet tool install --global dotnet-coverage
          dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Add dotnet tools to PATH
        run: echo "${HOME}/.dotnet/tools" >> $GITHUB_PATH

      - name: Collect code coverage and run tests
        run: |
          dotnet test Travelblog.Unittest/Travelblog.Tests.csproj --collect:"XPlat Code Coverage" --logger "trx;LogFileName=TestResults.trx" --results-directory ./coverage
          reportgenerator -reports:./coverage/**/coverage.cobertura.xml -targetdir:./coverage/CoverageReport -reporttypes:Html
      - name: Upload code coverage
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage
          path: ./coverage/CoverageReport

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: ./coverage/TestResults.trx

  filter-test-results:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Download test results
        uses: actions/download-artifact@v3
        with:
          name: test-results
          path: ./coverage/

      - name: Filter test results
        run: |
          dotnet tool install --global trx2html
          trx2html ./coverage/TestResults.trx --filter-namespace "Travelblog.Core.Services" --output ./coverage/FilteredTestResults.html
        env:
          PATH: ${{ runner.tool_cache }}/dotnet:${{ runner.tool_cache }}/dotnet/tools:$PATH

      - name: Upload filtered test results
        uses: actions/upload-artifact@v3
        with:
          name: filtered-test-results
          path: ./coverage/FilteredTestResults.html

  sonarcloud:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'

      - name: Download code coverage
        uses: actions/download-artifact@v3
        with:
          name: code-coverage
          path: coverage/

      - name: Install SonarCloud scanner
        run: dotnet tool install --global dotnet-sonarscanner

      - name: Add dotnet tools to PATH
        run: echo "${HOME}/.dotnet/tools" >> $GITHUB_PATH

      - name: Run SonarCloud analysis
        run: |
          dotnet sonarscanner begin /k:"semester-3-backend" /o:"semester-3" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.vscoveragexml.reportsPaths=coverage/coverage.cobertura.xml
          dotnet build Travelblog.Api/Travelblog.Api.csproj --configuration Release
          dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
