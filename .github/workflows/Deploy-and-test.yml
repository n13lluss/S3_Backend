name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
    types: [opened, synchronize, reopened]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure all history is available for analysis

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore TravelblogBackend.sln

      - name: Ensure publish directory exists
        run: mkdir -p publish/

      - name: Build Release
        run: dotnet build Travelblog.Api/Travelblog.Api.csproj --configuration Release --framework net8.0 --output publish/

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore TravelblogBackend.sln

      - name: Test
        run: dotnet test Travelblog.Unittest/Travelblog.Tests.csproj --verbosity normal

  sonarcloud:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure all history is available for analysis

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: dotnet tool install --global dotnet-sonarscanner

      - name: Setup SonarCloud
        run: dotnet sonarscanner begin /k:"semester-3_backend" /o:"semester-3" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"

      - name: Run build (for SonarCloud)
        run: dotnet build Travelblog.Api/Travelblog.Api.csproj --configuration Release

      - name: Complete SonarCloud analysis
        run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      - name: Check Quality Gate status
        id: quality-gate-status
        run: |
          STATUS=$(curl -s -u ${SONAR_TOKEN}: "https://sonarcloud.io/api/qualitygates/project_status?projectKey=semester-3_backend" | jq -r .projectStatus.status)
          echo "QUALITY_GATE_STATUS=$STATUS" >> $GITHUB_ENV

      - name: Post SonarCloud Quality Gate result as a comment
        uses: actions/github-script@v6
        with:
          script: |
            const { Octokit } = require("@octokit/rest");
            const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });

            const context = github.context;
            const { data: comments } = await octokit.issues.listComments({
              ...context.repo,
              issue_number: context.issue.number,
            });

            const body = `### SonarCloud Quality Gate Result\n\n` +
              `| Metric | Status |\n` +
              `|--------|--------|\n` +
              `| Quality Gate | \`${{ env.QUALITY_GATE_STATUS }}\` |\n`;

            const existingComment = comments.find(comment => comment.user.login === "github-actions[bot]" && comment.body.includes("### SonarCloud Quality Gate Result"));

            if (existingComment) {
              await octokit.issues.updateComment({
                ...context.repo,
                comment_id: existingComment.id,
                body: body,
              });
            } else {
              await octokit.issues.createComment({
                ...context.repo,
                issue_number: context.issue.number,
                body: body,
              });
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
